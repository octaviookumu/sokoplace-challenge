{"version":3,"sources":["app/provider.tsx","app/home.tsx","gql/generated/graphql.tsx","app/login.tsx","app/register.tsx","app/profile.tsx","app/not_found.tsx","app/confirm.tsx","app/main.tsx","index.tsx"],"names":["authToken","initial","appState","loggedIn","gqlError","msg","appSetLogin","token","appSetLogout","appSetAuthToken","appClearAuthToken","AppStateContext","createContext","AppStateProvider","children","useState","setAppState","setGQLError","appGetAuthToken","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","then","setContext","headers","authorization","subscribe","next","bind","error","complete","catch","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","length","exp","JwtDecode","Date","now","fetchAccessToken","handleFetch","accessToken","console","log","handleResponse","handleError","err","onError","graphQLErrors","networkError","undefined","path","message","HttpLink","uri","credentials","Provider","value","ApolloProvider","a","payload","operationName","variables","query","fetch","method","body","JSON","stringify","Accept","res","json","response","data","refresh","Home","useContext","defaultOptions","RegisterDocument","gql","ConfirmDocument","LoginDocument","ProfileDocument","Login","history","useHistory","baseOptions","options","Apollo","useLoginMutation","login","email","setEmail","password","setPassword","show","setShow","onSubmit","e","preventDefault","access_token","Error","replace","placeholder","onChange","target","type","Register","useRegisterMutation","register","confirmation","setConfirmation","tmp_confirm_token","Profile","useProfileQuery","fetchPolicy","loading","profile","NotFound","Confirm","useConfirmMutation","confirm","useParams","initialized","Main","setLoading","useEffect","finally","to","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deafa5dc.chunk.js","sourcesContent":["import React, { createContext, useState, ReactNode } from \"react\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  HttpLink,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport JwtDecode from \"jwt-decode\";\n\nlet authToken = \"\";\nconst initial = {\n  appState: { loggedIn: false },\n  gqlError: { msg: \"\" },\n  appSetLogin: (token: string) => {},\n  appSetLogout: () => {},\n  appSetAuthToken: (token: string) => {},\n  appClearAuthToken: () => {},\n};\n\nexport const AppStateContext = createContext(initial);\n\nfunction AppStateProvider({ children }: { children: ReactNode }) {\n  // app state\n  const [appState, setAppState] = useState({ loggedIn: false }); //alerts children on loggedin state\n  const [gqlError, setGQLError] = useState({ msg: \"\" }); // alerts children of any graphql errors\n\n    // called by child component after user logs in\n  const appSetLogin = (token: string) => {\n    authToken = token;\n    setAppState({ ...appState, loggedIn: true });\n  };\n\n  const appSetLogout = () => {\n    authToken = \"\";\n    setAppState({ ...appState, loggedIn: false });\n  };\n\n    // the remaining manage value of auth token without triggering a login or logout state\n  const appSetAuthToken = (token: string) => {\n    authToken = token;\n  };\n  const appClearAuthToken = () => {\n    authToken = \"\";\n  };\n  const appGetAuthToken = (): string => {\n    return authToken;\n  };\n\n    // Components needed for the\n  // apollo client\n  const cache = new InMemoryCache({});\n  const requestLink = new ApolloLink(\n    (operation, forward) =>\n      new Observable((observer) => {\n        let handle: any;\n        Promise.resolve(operation)\n          .then((operation) => {\n            operation.setContext({\n              headers: { authorization: `Bearer ${appGetAuthToken()}` },\n            });\n          })\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n        return () => {\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n\n  // interface MyToken {\n  //   name: string;\n  //   exp: string;\n  //   // whatever else is in the JWT.\n  // }\n\n  // client does all the communication to the server on behalf of the frontend\n  const client = new ApolloClient({\n    link: ApolloLink.from([\n      new TokenRefreshLink({\n        accessTokenField: \"access_token\",\n        isTokenValidOrUndefined: () => {\n          const token = appGetAuthToken();\n          if (token.length === 0) return true;\n          try {\n            const { exp } = JwtDecode<any>(token);\n            return Date.now() < exp * 1000;\n          } catch {\n            return false;\n          }\n        },\n        fetchAccessToken,\n        handleFetch: (accessToken) => {\n          console.log(`handleFetch: ${accessToken}`);\n          appSetAuthToken(accessToken);\n        },\n        handleResponse: (operation, accessTokenField) => {\n          console.log(`handleResponse: ${accessTokenField}`);\n          console.log(operation);\n        },\n        handleError: (err) => {\n          console.log(`handleError: ${err}`);\n          appSetLogout();\n        },\n      }),\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors === undefined || graphQLErrors[0].path === undefined)\n          return;\n        if (graphQLErrors[0].path[0] === \"refresh\") return;\n        const err = graphQLErrors[0].message;\n        setGQLError({ msg: err });\n      }),\n      requestLink,\n      new HttpLink({\n        uri: \"/graphql\",\n        credentials: \"include\",\n      }),\n    ]),\n    cache,\n  });\n\n  return (\n    <AppStateContext.Provider\n      value={{\n        appState,\n        gqlError,\n        appSetLogin,\n        appSetLogout,\n        appSetAuthToken,\n        appClearAuthToken,\n      }}\n    >\n      <ApolloProvider client={client}>{children}</ApolloProvider>\n    </AppStateContext.Provider>\n  );\n}\n\nexport default AppStateProvider;\n\nexport const fetchAccessToken = async (): Promise<any> => {\n  const payload = {\n    operationName: \"Refresh\",\n    variables: {},\n    query: \"mutation Refresh {\\n refresh {\\n access_token\\n __typename\\n}\\n}\\n\",\n  };\n  return fetch(\"https://graphql-user-api.herokuapp.com/graphql\", {\n    method: \"POST\",\n    credentials: \"include\",\n    body: JSON.stringify(payload),\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      Accept: \"application/json\",\n    },\n  }).then(async (res) => {\n    const response = await res.json();\n    console.log(\"fetchAccessToken\");\n    console.log(response.data.refresh);\n    return response.data.refresh;\n  });\n};","import React, { useContext } from \"react\";\nimport { AppStateContext } from \"./provider\";\n\nexport const Home: React.FC = () => {\n  const { appState } = useContext(AppStateContext);\n  return appState.loggedIn ? (\n    <div>Logged in user landing page</div>\n  ) : (\n    <div>Regular landing page</div>\n  );\n};\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  access_token?: Maybe<Scalars['ID']>;\n  ukey?: Maybe<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  confirm?: Maybe<Scalars['Boolean']>;\n  login?: Maybe<AccessToken>;\n  refresh?: Maybe<AccessToken>;\n  register?: Maybe<RegisteredUser>;\n  resetPassword?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type MutationConfirmArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  confirmation: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationResetPasswordArgs = {\n  confirmation: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type Profile = {\n  __typename?: 'Profile';\n  email?: Maybe<Scalars['String']>;\n  ukey?: Maybe<Scalars['ID']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  forgotPassword?: Maybe<TmpEmailResponse>;\n  profile?: Maybe<Profile>;\n  resendConfirmation?: Maybe<TmpEmailResponse>;\n};\n\n\nexport type QueryForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type QueryResendConfirmationArgs = {\n  email: Scalars['String'];\n};\n\nexport type RegisteredUser = {\n  __typename?: 'RegisteredUser';\n  tmp_confirm_token?: Maybe<Scalars['ID']>;\n  ukey?: Maybe<Scalars['ID']>;\n};\n\nexport type TmpEmailResponse = {\n  __typename?: 'TmpEmailResponse';\n  tmp_email_token?: Maybe<Scalars['ID']>;\n};\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  confirmation: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = { __typename?: 'Mutation', register?: { __typename?: 'RegisteredUser', ukey?: string | null | undefined, tmp_confirm_token?: string | null | undefined } | null | undefined };\n\nexport type ConfirmMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ConfirmMutation = { __typename?: 'Mutation', confirm?: boolean | null | undefined };\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login?: { __typename?: 'AccessToken', ukey?: string | null | undefined, access_token?: string | null | undefined } | null | undefined };\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = { __typename?: 'Query', profile?: { __typename?: 'Profile', email?: string | null | undefined } | null | undefined };\n\n\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $confirmation: String!) {\n  register(email: $email, password: $password, confirmation: $confirmation) {\n    ukey\n    tmp_confirm_token\n  }\n}\n    `;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      confirmation: // value for 'confirmation'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const ConfirmDocument = gql`\n    mutation Confirm($email: String!) {\n  confirm(email: $email)\n}\n    `;\nexport type ConfirmMutationFn = Apollo.MutationFunction<ConfirmMutation, ConfirmMutationVariables>;\n\n/**\n * __useConfirmMutation__\n *\n * To run a mutation, you first call `useConfirmMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useConfirmMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [confirmMutation, { data, loading, error }] = useConfirmMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useConfirmMutation(baseOptions?: Apollo.MutationHookOptions<ConfirmMutation, ConfirmMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ConfirmMutation, ConfirmMutationVariables>(ConfirmDocument, options);\n      }\nexport type ConfirmMutationHookResult = ReturnType<typeof useConfirmMutation>;\nexport type ConfirmMutationResult = Apollo.MutationResult<ConfirmMutation>;\nexport type ConfirmMutationOptions = Apollo.BaseMutationOptions<ConfirmMutation, ConfirmMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    ukey\n    access_token\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  profile {\n    email\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, options);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;","import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useLoginMutation } from \"../gql/generated/graphql\";\nimport { AppStateContext } from \"./provider\";\n\nexport const Login: React.FC = () => {\n  const history = useHistory();\n  const { appSetLogin, gqlError } = useContext(AppStateContext);\n  const [login] = useLoginMutation();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  return (\n    <div>\n      <div>Login page</div>\n      {show ? <div>{gqlError.msg}</div> : undefined}\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          try {\n            setShow(false);\n            const { data } = await login({ variables: { email, password } });\n            if (\n              data === undefined ||\n              data?.login === undefined ||\n              data.login?.access_token === undefined\n            )\n              throw new Error(\"Invalid credentials\");\n            appSetLogin(data.login?.access_token!);\n            history.replace(\"/\");\n          } catch (err) {\n            setShow(true);\n          }\n        }}\n      >\n        <div>\n          <input\n            value={email}\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <input\n            value={password}\n            placeholder=\"Password\"\n            type=\"password\"\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport { useRegisterMutation } from \"../gql/generated/graphql\";\nimport { useHistory } from \"react-router-dom\";\nimport { AppStateContext } from \"./provider\";\n\nexport const Register: React.FC = () => {\n  const history = useHistory();\n  const { gqlError } = useContext(AppStateContext);\n  const [register] = useRegisterMutation();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmation, setConfirmation] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  return (\n    <div>\n      <div>Register page</div>\n      {show ? <div>{gqlError.msg}</div> : undefined}\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          try {\n            setShow(false);\n            const { data } = await register({\n              variables: { email, password, confirmation },\n            });\n            if (data === undefined || data?.register === undefined)\n              throw new Error(\"Invalid credentials\");\n            history.replace(`/confirm/${data?.register?.tmp_confirm_token}`);\n          } catch (err) {\n            setShow(true);\n          }\n        }}\n      >\n        <div>\n          <input\n            value={email}\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <input\n            value={password}\n            placeholder=\"Password\"\n            type=\"password\"\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <input\n            value={confirmation}\n            placeholder=\"Confirm Password\"\n            type=\"password\"\n            onChange={(e) => {\n              setConfirmation(e.target.value);\n            }}\n          />\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useProfileQuery } from \"../gql/generated/graphql\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const Profile: React.FC = () => {\n  const history = useHistory();\n  const { data, loading, error } = useProfileQuery({\n    fetchPolicy: \"network-only\",\n  });\n\n  if (loading) {\n    return (\n      <div>\n        <div>Profile page</div>\n        <div>Loading..</div>\n      </div>\n    );\n  }\n\n  if (error) history.replace(\"/\");\n\n  return (\n    <div>\n      <div>Profile page</div>\n      <div>Email: {data?.profile?.email}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const NotFound: React.FC = () => {\n  return <div>Not found</div>;\n};\n","import React, { useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useConfirmMutation } from \"../gql/generated/graphql\";\nimport { AppStateContext } from \"./provider\";\n\nexport const Confirm: React.FC = () => {\n  const history = useHistory();\n  const { appSetAuthToken, appClearAuthToken, gqlError } =\n    useContext(AppStateContext);\n\n  const [show, setShow] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [confirm] = useConfirmMutation();\n  const { token } = useParams<{ token: string }>();\n\n  if (token === undefined || token === \"\")\n    return <div>Invalid user confirmation link</div>;\n\n  return (\n    <div>\n      <div>Confirmation page</div>\n      {show ? <div>{gqlError.msg}</div> : undefined}\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          try {\n            setShow(false);\n            appSetAuthToken(token);\n            const { data } = await confirm({ variables: { email } });\n            appClearAuthToken();\n            if (\n              data === undefined ||\n              data?.confirm === undefined ||\n              !data.confirm\n            )\n              throw new Error(\"Not authorized\");\n            history.replace(\"/login\");\n          } catch (err) {\n            setShow(true);\n          }\n        }}\n      >\n        <div>\n          <input\n            value={email}\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n        </div>\n        <button type=\"submit\">Confirm</button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { AppStateContext, fetchAccessToken } from \"./provider\";\nimport { Home } from \"./home\";\nimport { Login } from \"./login\";\nimport { Register } from \"./register\";\nimport { Profile } from \"./profile\";\nimport { NotFound } from \"./not_found\";\nimport { Confirm } from \"./confirm\";\n\nlet initialized = false;\nexport const Main: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const { appState, appSetLogin, appSetLogout } = useContext(AppStateContext);\n\n  useEffect(() => {\n    if (initialized) return;\n    initialized = true;\n    fetchAccessToken()\n      .then((data: any) => {\n        const failed = data === undefined || data?.access_token === undefined;\n        failed ? appSetLogout() : appSetLogin(data?.access_token!);\n      })\n      .catch((e) => {\n        appSetLogout();\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  });\n\n  if (loading) return <div>Loading..</div>;\n\n  return (\n    <Router>\n      <div>\n        <header>\n          {appState.loggedIn ? (\n            <div>\n              <div>\n                <Link to=\"/\">Home</Link>\n              </div>\n              <div>\n                <Link to=\"/profile\">Profile</Link>\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div>\n                <Link to=\"/\">Home</Link>\n              </div>\n              <div>\n                <Link to=\"/register\">Register</Link>\n              </div>\n              <div>\n                <Link to=\"/login\">Login</Link>\n              </div>\n            </div>\n          )}\n        </header>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/register\">\n            {appState.loggedIn ? <Redirect to=\"/\" /> : <Register />}\n          </Route>\n          <Route exact path=\"/confirm/:token\">\n            {appState.loggedIn ? <Redirect to=\"/\" /> : <Confirm />}\n          </Route>\n          <Route exact path=\"/login\">\n            {appState.loggedIn ? <Redirect to=\"/\" /> : <Login />}\n          </Route>\n          <Route exact path=\"/profile\">\n            {appState.loggedIn ? <Profile /> : <Redirect to=\"/login\" />}\n          </Route>\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { Main } from \"./app/main\";\nimport AppStateProvider from \"./app/provider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n      <Main />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}